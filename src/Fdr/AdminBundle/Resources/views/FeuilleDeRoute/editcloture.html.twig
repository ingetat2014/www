{% extends "FOSUserBundle::layout.html.twig" %}
{% block title %}Feuille de route|Edit-Clôture{% endblock %}
{% block fos_user_content %}
{% block body -%}
<div class="page-header">  <h2> Modification de feuille de route(Clôture de mission-{{ entity}})</h2> </div>  

     {{ form_start(edit_form, {'attr': {'class': 'form-horizontal','onSubmit':'return validerFormCloture()'} } ) }}

          {{ form_errors(edit_form) }}
<div class="row">
    <div class="span12">
        <fieldset>
            <legend>Extrait debut de mission </legend>
            <table class="table-responsive records_list table-bordered table-condensed">
                <thead>
                    <tr>
                        <th>Code</th>
                        <th>Depot</th>
                        <th>Date de debut mission</th>
                        <th>Chauffeur(s)-Manutentionnaire(s)</th>
                        <th>Nbre de manu.</th>
                        <th>Vehicule</th>
                        <th>Compteur reel</th>
                        <th>Type de prestation</th>
                        <th>Etat</th>
                    </tr>
                </thead>
                <tbody>

                    <tr>
                        <td>{{ entity.id }}</td>
                        <td>{{ entity.depot }}</td>
                        <td id="fdr_adminbundle_feuillederoute_dateDebutMission">{% if entity.dateDebutMission %}{{ entity.dateDebutMission|date('d-m-Y H:i') }}{% endif %}</td>
                        <td>
                            <ol>
                {% for man in entity.manutentions %}
                                <li> {{ man}} </li>
                {% endfor %}
                            </ol>
                        </td>
                        <td>{% if entity.nombreManutention %}{{ entity.nombreManutention}} {% else %} 0 {% endif %}</td>
                        <td>{{ entity.vehicule }}</td>
                        <td>{{ entity.compteurReel }}</td>
                        <td>{{ entity.typePrestation }}</td>
                        <td><strong>{{entity.etat }}</strong></td>
                        <td class="col-sm-2">
                            {%if role.affFDR or role.imprimerFDR%}
                            <div class="col-sm-2">
                                <a class="btn-default" target="_blank" href="{{ path('feuillederoute_show', { 'id': entity.id }) }}">
                                    <img id="inputButtonAfficher" title="Afficher" src="{{ asset('bundles/fdradmin/images/apercu.png') }}" />
                                </a> 
                            </div>
                            {%endif%}
                            {%if role.editCompteur  or role.affectationChauffManu or role.affectationVehicule %}
                            <div class="col-sm-2">
                                <a class="btn-default" target="_blank" href="{{ path('feuillederoute_editdebut', { 'id': entity.id }) }}">
                                    <img id="inputButtonAfficher" title="Editer le debut de mission" src="{{ asset('bundles/fdradmin/images/modifier.png') }}" />
                                </a> 
                            </div>
                            {%endif%}
                        </td>
                    </tr>

                </tbody>
            </table>
        </fieldset>
    </div>
</div>
<div class="row">
    <div class="span4">

        <fieldset>

            <legend>Date de fin de mission </legend>

            <div class="row-fluid {{role.cloturerFDR?'':'desactiver-champs'}}">
                <div class="span4">{{ form_label(edit_form.dateFinMission," Date fin de mission") }}</div>
{{ form_widget(edit_form.dateFinMission) }}<span class="alert-danger ">{{ form_errors(edit_form.dateFinMission) }}</span>
            </div>
        </fieldset>
    </div>
    <div class="span4" >

        <fieldset>
            <legend>Compteur final</legend>
            <div class="row-fluid {{role.cloturerFDR?'':'desactiver-champs'}}">
                <div class="span4">{{ form_label(edit_form.compteurFinal,"  Compteur final") }}</div>
{{ form_widget(edit_form.compteurFinal,{'attr': {'required': 'required'}}) }}<span class="alert-danger ">{{ form_errors(edit_form.compteurFinal) }}</span>
            </div>
        </fieldset>
    </div>
    <div class="span4">
        <fieldset>
            <legend>Remarques</legend>
            <div class="row-fluid {{role.cloturerFDR?'':'desactiver-champs'}}">
                 {{ form_widget(edit_form.remarques,{ 'attr': {'cols': '50', 'rows':'5','placeholder': "Si vous avez des remarques à faire.."} }) }}
                <span class="alert-danger ">{{ form_errors(edit_form.remarques) }}</span>
            </div>
        </fieldset>
    </div>
</div>     
<div class="row">
    <div class="span12">

        <fieldset>
            <legend>Les bons de carburant</legend>
            <div class="row {{role.cloturerFDR?'':'desactiver-champs'}}">
                {{ form_label(edit_form.bonCarburantHuiles) }}
                {{ form_errors(edit_form.bonCarburantHuiles) }}
                {{ form_widget(edit_form.bonCarburantHuiles) }}
            </div>
        </fieldset>
    </div>
    <div class="span12">
        <fieldset>
            <legend>Les bons de peage</legend>
            <div class="row {{role.cloturerFDR?'':'desactiver-champs'}}">
                {{ form_label(edit_form.peages) }}
                {{ form_errors(edit_form.peages) }}
                {{ form_widget(edit_form.peages) }}
            </div>
        </fieldset>
    </div>    

</div>
<div class="row-fluid">
        {{ form_label(edit_form.Enregistrer,'Enregistrer et Clôturer')}}{{ form_widget(edit_form.Enregistrer, {'attr': {'class': 'btn btn-primary span2 offset4'}}) }}
</div>
<div class="">{{ form_rest(edit_form) }}</div>


        {# Pour le bouton, pas de label ni d'erreur, on affiche juste le widget #}


        {# Fermeture de la balise <form> du formulaire HTML #}
        {{ form_end(edit_form) }}
{%if role.affFDR%}
<div class="row-fluid">
    <div class="span2 offset9">

        <a href="{{ path('feuillederoute') }}">
            <button class="btn btn-default">
                Revenir à la liste
            </button>
        </a>

    </div>
</div>
{%endif%}
<script>
        $(document).ready(function() {
        boucler('chauffeur');
        boucler('manutentionnaire');
        // On recupère la balise <div> en question qui contient l'attribut « data-prototype » qui nous interesse.
        var $container = $('div#fdr_adminbundle_feuillederoute_peages');
        // On ajoute un lien pour ajouter une nouvelle categorie
        var $addLink = $('<span class="span3 page-header"><a href="#" id="add_bon" class="btn btn-default">Ajouter un bon de peage</a></span>');
        //$container.append($addLink);
        $addLink.appendTo($container);
        $container.data('index', $container.children('div').length);
        for (var i = 0; i < $container.children('div').length; i++)
        {
            styliserPrototype(i);
        }
        $addLink.click(function(e) {
            
            addPeage($container);
            $container.data('index', $container.data('index') + 1);
            e.preventDefault(); // evite qu'un # apparaisse dans l'URL
            return false;
        });
        // On definit un compteur unique pour nommer les champs qu'on va ajouter dynamiquement
        //var index = $container.find(':input').length;
        // var index = $container.children('div').length;
        // On ajoute un premier champ automatiquement s'il n'en existe pas dejà un (cas d'une nouvelle annonce par exemple).
        if ($container.data('index') === 0) {
           // addPeage($container);
           // $container.data('index', $container.data('index') + 1);
        } else {
            // Pour chaque categorie dejà existante, on ajoute un lien de suppression
            $container.children('div').each(function() {
                addDeleteLink($(this));
            });
        }

        // La fonction qui ajoute un formulaire Categorie
        function addPeage($container) {
            var $prototype = $($container.attr('data-prototype').replace(/__name__label__/g, '<div class="span12" >Peage n°' + ($container.data('index') + 1) + " : </div>")
                    .replace(/__name__/g, ($container.data('index'))));
            addDeleteLink($prototype);
            $container.append($prototype);
            styliserPrototype($container.data('index'));
            daterLesBons();

        }

        // La fonction qui ajoute un lien de suppression d'une categorie
        function addDeleteLink($prototype) {
            // Creation du lien
            $deleteLink = $('<div class="span2"><a href="#" class="btn btn-danger">Supprimer</a></div>');
            // Ajout du lien
            $prototype.append($deleteLink);
            // Ajout du listener sur le clic du lien
            $deleteLink.click(function(e) {
                if ($container.children('div').length > 1 || true) {
                    $prototype.remove();
                }
                e.preventDefault(); // evite qu'un # apparaisse dans l'URL
                return false;
            });
        }
    });
    $(document).ready(function() {
        // On recupère la balise <div> en question qui contient l'attribut « data-prototype » qui nous interesse.
        var $container = $('div#fdr_adminbundle_feuillederoute_bonCarburantHuiles');
        // On ajoute un lien pour ajouter une nouvelle categorie
        var $addLink = $('<span class="span3  page-header"><a href="#" id="add_bon" class="btn btn-default">Ajouter un bon de caruburant</a></span>');
        //$container.append($addLink);
        $addLink.appendTo($container);
        $container.data('index', $container.children('div').length);
        for (var i = 0; i < $container.children('div').length; i++)
        {
            styliserPrototype(i);
        }
        $addLink.click(function(e) {
            
            addBon($container);
            $container.data('index', $container.data('index') + 1);
            e.preventDefault(); // evite qu'un # apparaisse dans l'URL
            return false;
        });
        // On definit un compteur unique pour nommer les champs qu'on va ajouter dynamiquement
        //var index = $container.find(':input').length;
        // var index = $container.children('div').length;
        // On ajoute un premier champ automatiquement s'il n'en existe pas dejà un (cas d'une nouvelle annonce par exemple).
        if ($container.data('index') === 0) {
            addBon($container);
            $container.data('index', $container.data('index') + 1);
        } else {
            // Pour chaque categorie dejà existante, on ajoute un lien de suppression
            $container.children('div').each(function() {
                addDeleteLink($(this));
            });
        }

        // La fonction qui ajoute un formulaire Categorie
        function addBon($container) {
            var $prototype = $($container.attr('data-prototype').replace(/__name__label__/g, '<div class="span12" >Bon n°' + ($container.data('index') + 1) + " : </div>")
                    .replace(/__name__/g, ($container.data('index'))));
            addDeleteLink($prototype);
            $container.append($prototype);
            styliserPrototype($container.data('index'));
             daterLesBons();

        }

        // La fonction qui ajoute un lien de suppression d'une categorie
        function addDeleteLink($prototype) {
            // Creation du lien
            $deleteLink = $('<div class="span2"><a href="#" class="btn btn-danger">Supprimer</a></div>');
            // Ajout du lien
            $prototype.append($deleteLink);
            // Ajout du listener sur le clic du lien
            $deleteLink.click(function(e) {
                if ($container.children('div').length > 1) {
                    $prototype.remove();
                }
                e.preventDefault(); // evite qu'un # apparaisse dans l'URL
                return false;
            });
        }
    });
    
    

    /************komay*************/
    function boucler(qui)
    {
        for (i = 0; i < $("select[id$='_" + qui + "']").length; i++)
        {
            if ($("select[id$='_" + qui + "'] option:selected").get(i).value)
            {
                selectionnerManOuChauff($("select[id$='_" + qui + "'] option:selected").get(i).parentNode.getAttribute('id'), qui);
            }
        }

    }

    function selectionnerManOuChauff(id, qui)
    {
        var res = id.split("_");
        var manlst = "#fdr_adminbundle_feuillederoute_manutentions_" + res[res.length - 2] + "_manutentionnaire";
        var chaufflst = "#fdr_adminbundle_feuillederoute_manutentions_" + res[res.length - 2] + "_chauffeur";
        var manOuChauff = "#fdr_adminbundle_feuillederoute_manutentions_" + res[res.length - 2] + "_manOuChauff option[value='" + qui + "']";
        var nbreManu = "#fdr_adminbundle_feuillederoute_manutentions_" + res[res.length - 2] + "_nombreManutentions";
        var ayantMan = "#fdr_adminbundle_feuillederoute_manutentions_" + res[res.length - 2] + "_ayantManutentions";
        $(manOuChauff).prop('selected', true);
        if (qui === 'chauffeur')
        {
            $(manlst).hide();
            $(chaufflst).show();
        }
        else
        {
            $(chaufflst).hide();
            $(manlst).show();
        }
        $(ayantMan).attr('checked', true);
    }
    function  styliserPrototype(id)
    {
        var parentCarburant = "div#fdr_adminbundle_feuillederoute_bonCarburantHuiles_" + id;
        var parentPeage = "div#fdr_adminbundle_feuillederoute_peages_" + id;
        
        $(parentCarburant+","+parentPeage).addClass('span12');
        //$(parentPeage).addClass('row-fluid span12');
        $(parentCarburant+","+parentPeage).css({'border':'0px solid #1F79A5'});
        $(parentCarburant+","+parentPeage).css({'background-color':'#F4F5FF'});
        //$(parentCarburant + " div,"+parentPeage + " div").css({'height':'15px'});
        $(parentCarburant + " div:has(:input[type!='date']:not([type='time'])),"+parentPeage + " div:has(:input[type!='date']:not([type='time']))").addClass('bons span3 required');
        $('<div class="row-fluid">').insertBefore(parentCarburant+","+parentPeage);
        $('</div>').insertAfter(parentCarburant+","+parentPeage);

    }

    function calculGloabalMontant()
    {
        for (i = 0; i < $("* [id$='_montant']").length; i++)
        {
           //var montant = document.getElementById($("select[id$='_montant']").get(i).attr('id'));
           var res = ($("* [id $='_montant']").get(i).id).split('_');
           if(res[res.length - 3]==='bonCarburantHuiles')
           {
              $("* [id $='_montant']").get(i).value =parseFloat("0"+$("* [id $='_quantite']").get(i).value.replace(",", "."))*parseFloat("0"+$("* [id $='_prixUnitaire']").get(i).value.replace(",", "."));
           }
        }
    }
    function verifCompteursDatesCloture() {
        calculGloabalMontant();
        var permutC = null;
        var permutD = null;
        var compteurs = $("*[id$='_compteur']");
        var resCompteurs = [];
        var dates = $("*[id$='_date_date']");
        var times = $("*[id$='_date_time']");
        var datesPeage = $("*[id$='_datePassage_date']");
        var timesPeage = $("*[id$='_datePassage_time']");
        var resDates = [];
        var resDatesPeages = [];
        var valideDatesCompteurs = true;
        var dateFuture = false;
        var compteurReelAvecLesBons = true;
        var dateFutureAvecLesBons = true;
        var dateFutureAvecPea = true;
        var compteurReel = parseInt("0" + $("#fdr_adminbundle_feuillederoute_compteurReel").val());
        var tdDateDebutMission = $("#fdr_adminbundle_feuillederoute_dateDebutMission").text();
        var dateString = tdDateDebutMission.split(" ", 2);
        var tdtime = dateString[1].split(":", 2);
        var dateDebut = new Date(dateString[0]);
        dateDebut.setHours(parseInt("0" + tdtime[0]));
        dateDebut.setMinutes(parseInt("0" + tdtime[1]));
        var compteurFinal = parseInt("0" + $("#fdr_adminbundle_feuillederoute_compteurFinal").val());
        var datefinMission = $("#fdr_adminbundle_feuillederoute_dateFinMission_date").val();
        var timefinMission = $("#fdr_adminbundle_feuillederoute_dateFinMission_time").val().split(":", 2);
        var daba = new Date().getTime();
        var dateFin = new Date(datefinMission);
        dateFin.setHours(parseInt("0" + timefinMission[0]));
        dateFin.setMinutes(parseInt("0" + timefinMission[1]));
        dateFuture = (daba < dateFin.getTime()) ? true : false;
        var max = 0;
        var nulle = -1;
        var maxDiff = 2000;
        for (i = 0; i < datesPeage.length; i++)
        {
            var datei = new Date(datesPeage[i].value);
            var hm = timesPeage[i].value.split(":", 2);
            datei.setHours(parseInt("0" + hm[0]));
            datei.setMinutes(parseInt("0" + hm[1]));
            resDatesPeages.push(parseInt("0" + datei.getTime()));
            if (resDatesPeages[i] > dateFin.getTime() || resDatesPeages[i] < dateDebut.getTime())
            {
                dateFutureAvecPea = false;
                break;
            }
        }
        for (i = 0; i < compteurs.length; i++)
        {
            resCompteurs.push(parseInt("0" + compteurs[i].value));
            if (resCompteurs[i] === 0) {
                nulle = i;
                break;
            }
            else if (resCompteurs[i] < compteurReel)
            {
                compteurReelAvecLesBons = false;
                break;
            }
            else
            {
                var datei = new Date(dates[i].value);
                var hm = times[i].value.split(":", 2);
                datei.setHours(parseInt("0" + hm[0]));
                datei.setMinutes(parseInt("0" + hm[1]));
                resDates.push(parseInt("0" + datei.getTime()));
                if (resDates[i] > dateFin.getTime() || resDates[i] < dateDebut.getTime())
                {
                    dateFutureAvecLesBons = false;
                }
            }
        }

        //tri par compteur
        for (i = 0; i < resDates.length - 1; i++)
        {
            for (j = i + 1; j < resDates.length; j++)
            {
                if (resCompteurs[i] > resCompteurs[j])
                {
                    permutD = resDates[i];
                    resDates[i] = resDates[j];
                    resDates[j] = permutD;
                    permutC = resCompteurs[i];
                    resCompteurs[i] = resCompteurs[j];
                    resCompteurs[j] = permutC;
                }
            }
        }

        for (i = 0; i < resDates.length - 1; i++)
        {
            for (j = i + 1; j < resDates.length; j++)
            {
                if (resDates[i] >= resDates[j])
                {
                    valideDatesCompteurs = false;
                }
            }
        }
        if (dateDebut.getTime() >= dateFin.getTime())
        {
            alert('La date/heure de Fin Mission  doit être superieure à celle de Debut de Mission');
            return false;
        }
        else if (dateFuture)
        {
            alert('La date/heure de Fin Mission  depasse La date/heure actuelle');
            return false;
        }
        else if (compteurReel < compteurFinal) {
            $("#fdr_adminbundle_feuillederoute_compteurFinal").css('border-color', 'green');
            max = resCompteurs[resCompteurs.length - 1];
            if (nulle !== -1)
            {
                alert('Nous avons detecte un compteur dans les bons de carburant ayant une valeur nulle, veuillez corriger ce compteur');
                return false;
            }
            else if (!valideDatesCompteurs)
            {
                alert('Les Dates de prises avec les compteurs ne sont pas logiques veuillez les verifier');
                return false;
            }
            else if (!dateFutureAvecLesBons)
            {
                alert('Les dates des bons carburant doivent être comprises entre la date de debut et Fin de Mission');
                return false;
            }
            else if (!dateFutureAvecPea)
            {
                alert('Les dates des bons de peage doivent être comprises entre la date de debut et Fin de Mission');
                return false;
            }
            else if (!compteurReelAvecLesBons)
            {
                alert('Les compteurs des bons ne peuvent pas être inferieurs au compteur reel');
                return false;
            }
            else if (max > compteurFinal)
            {
                $("*[id$='_compteur']").css('border-color', 'red');
                $("#fdr_adminbundle_feuillederoute_compteurFinal").css('border-color', 'red');
                alert('compteur Final: ' + compteurFinal + ' est inferieur à celui du dernier bon ' + max);
                return false;
            }
            else
            {
                if (compteurFinal - compteurReel > maxDiff)
                {
                    if (window.confirm('La difference entre le compteur final et le compteur reel depasse ' + maxDiff + ' \n Vous confirmer ce compteur ?') === true) {
                        return true;
                    } else
                        return false;

                }
                $("*[id$='_compteur']").css('border-color', 'green');
                $("#fdr_adminbundle_feuillederoute_compteurFinal").css('border-color', 'green');
                return true;
            }
        }
        else
        {
            $("#fdr_adminbundle_feuillederoute_compteurFinal").css('border-color', 'red');
            alert('Le compteur final doit être strictement superieur au compteur reel');
            return false;
        }
    }
    
</script>
{% endblock %}
{% endblock fos_user_content %}