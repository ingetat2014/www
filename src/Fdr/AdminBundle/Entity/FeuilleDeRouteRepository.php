<?php

namespace Fdr\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * FeuilleDeRouteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FeuilleDeRouteRepository extends EntityRepository
{
    public function etatParGroupeVehicule($dateDebut,$dateFin)
        {
            $qb=$this->createQueryBuilder('f');
            $qb->select('Sum(f.calcQuantite) cntQ ,Sum(f.calcKmParcourus) cntkm, count(f.id) cnt,Sum(f.calcPrise) prises')
                ->andWhere('f.dateDebutMission > :dateDebut AND f.dateFinMission< :dateFin AND f.etat=:etat')
                ->setParameter('dateDebut',$dateDebut )  
                ->setParameter('dateFin', $dateFin) 
                    ->setParameter('etat', 'cloturer')
               ->leftJoin('f.vehicule', 'v')
                ->addSelect('v.type type')
                ->groupBy('v.type')
                ->orderBy('v.type', 'ASC');
            return $qb->getQuery()->getResult();
            
        }
        public function etatParVehicule($dateDebut,$dateFin)
        {
            $qb=$this->createQueryBuilder('f');
            $qb->select('Sum(f.calcQuantite) cntQ ,Sum(f.calcKmParcourus) cntkm, count(f.id) cnt,Sum(f.calcPrise) prises')
                ->andWhere('f.dateDebutMission > :dateDebut AND f.dateFinMission< :dateFin AND f.etat=:etat')
                ->setParameter('dateDebut',$dateDebut ) 
                ->setParameter('dateFin', $dateFin) 
                    ->setParameter('etat', 'cloturer')
                ->leftJoin('f.vehicule', 'v')
                ->addSelect('v.type type, v.matricule matricule, v.remorque remorque , v.numSociete numSociete , v.id idVehicule ')
                ->groupBy('v.matricule')
                ->orderBy('v.matricule', 'ASC');
            return $qb->getQuery()->getResult();
            
        }
        public function etatParVehiculeTypeVehicule($dateDebut,$dateFin,$type)
        {
            $qb=$this->createQueryBuilder('f');
            $qb->select('Sum(f.calcQuantite) cntQ ,Sum(f.calcKmParcourus) cntkm, count(f.id) cnt,Sum(f.calcPrise) prises')
                ->andWhere('f.dateDebutMission > :dateDebut AND f.dateFinMission< :dateFin AND f.etat=:etat')
                ->setParameter('dateDebut',$dateDebut ) 
                ->setParameter('dateFin', $dateFin) 
                ->leftJoin('f.vehicule', 'v')
                ->addSelect('v.type type, v.matricule matricule, v.remorque remorque , v.numSociete numSociete ')
                ->andWhere('v.type=:type')
                ->setParameter('type', $type)
                    ->setParameter('etat', 'cloturer')
                ->groupBy('v.matricule')
                ->orderBy('v.matricule', 'ASC');
            return $qb->getQuery()->getResult();
            
        }
        
        public function etatParVehiculeX($dateDebut,$dateFin,$id)
        {
            $qb=$this->createQueryBuilder('f');
            $qb//->select('Sum(f.calcQuantite) cntQ ,Sum(f.calcKmParcourus) cntkm, count(f.id) cnt,Sum(f.calcPrise) prises')
               ->select('f.calcQuantite quantite, f.calcKmParcourus kmParcouru,f.calcPrise nbPrise' )
                ->andWhere('f.dateDebutMission > :dateDebut AND f.dateFinMission< :dateFin AND f.vehicule=:idV AND f.etat=:etat')
                ->setParameter('dateDebut',$dateDebut ) 
                ->setParameter('dateFin', $dateFin) 
                ->setParameter('idV', $id) 
                    ->setParameter('etat', 'cloturer')
                ->leftJoin('f.vehicule', 'v')
                ->addSelect('v.type type, v.matricule matricule, v.remorque remorque, v.numSociete numSociete, v.dateLancement dateLancement');
            return $qb->getQuery()->getResult();
        }
         public function etatParVehiculeDetail($dateDebut,$dateFin,$id)
        {
            $qb=$this->createQueryBuilder('f');
            $qb->select('f.calcQuantite cntQ ,f.calcKmParcourus cntkm, f.id cnt,f.calcPrise prises')
                ->andWhere('f.dateDebutMission > :dateDebut AND f.dateFinMission< :dateFin AND f.vehicule=:idV AND f.etat=:etat')
                ->setParameter('dateDebut',$dateDebut ) 
                ->setParameter('dateFin', $dateFin) 
                ->setParameter('idV', $id) 
                    ->setParameter('etat', 'cloturer')
                ->leftJoin('f.vehicule', 'v')
                ->addSelect('v.type type, v.matricule matricule, v.remorque remorque, v.numSociete numSociete ');
            return $qb->getQuery()->getResult();
        }
     public function verifierDateDej($dateDebut,$idFdr)
     {
         $qb=$this->createQueryBuilder('f');
            $qb->select('f')
                ->where('f.dateFinMission LIKE :dateDebut AND f.id = :idFdr AND f.etat=:etat')
                ->setParameter('dateDebut',$dateDebut.'%')
                ->setParameter('idFdr',$idFdr)
                    ->setParameter('etat', 'cloturer');
            return $qb->getQuery()->getResult();
     }
     public function etatParToutes($dateDebut,$dateFin)
        {
            $qb=$this->createQueryBuilder('f');
            $qb//->select('Sum(f.calcQuantite) cntQ ,Sum(f.calcKmParcourus) cntkm, count(f.id) cnt,Sum(f.calcPrise) prises')
               ->select('f.id id ,f.dateDebutMission,f.dateFinMission ,f.calcQuantite quantite, f.calcKmParcourus kmParcouru,f.calcPrise nbPrise,f.etat etat ' )
                ->andWhere('f.dateDebutMission > :dateDebut AND f.dateFinMission< :dateFin AND f.etat=:etat AND f.id=41')
				->orderBy("id", "DESC")
                ->setParameter('dateDebut',$dateDebut ) 
                ->setParameter('dateFin', $dateFin)
                ->setParameter('etat', 'cloturer')
                ->leftJoin('f.vehicule', 'v')
                ->addSelect('v.type type, v.matricule matricule, v.remorque remorque, v.numSociete numSociete, v.dateLancement dateLancement');
            return $qb->getQuery()->getResult();
        }
}
